// Copyright (c) 2016, Ben Morgan. All rights reserved.
// Use of this source code is governed by an MIT license
// that can be found in the LICENSE file.

package lackey

import "errors"

type Flag int

const (
	Error Flag = 1 << iota

	// One of Equal or Unequal must be set, or the flag must be Unknown.
	Equal
	Unequal

	Missing
	Removed
	Mismatch
	Time
	Size
	Quality
	Metadata

	Unknown Flag = 0
)

func Compare(src, dst *Entry, qf QualityFunc) (Flag, error) {
	if src == nil && dst == nil {
		return Error, errors.New("both source and target nil")
	} else if src == nil {
		return Unequal | Removed, nil
	} else if dst == nil {
		return Unequal | Missing, nil
	}

	if src.Key() != dst.Key() {
		return Error, errors.New("key must be identical")
	}
	if src.IsDir() != dst.IsDir() {
		return Unequal | Mismatch, nil
	}
	if src.IsMusic() != dst.IsMusic() {
		return Unequal | Mismatch, nil
	}

	var f Flag
	if src.FileInfo().ModTime() > dst.FileInfo().ModTime() {
		f |= Time
	}
	if src.IsMusic() {
		sm := src.Data.(Metadata)
		dm := dst.Data.(Metadata)
		if !audio.MetadataEquals(sm, dm) {
			f |= Metadata
		}
		if qf(sm, dm) {
			f |= Metadata
		}
	} else {
		if src.Size() != dst.Size() {
			f |= Size
		}
	}
}

type Op int
